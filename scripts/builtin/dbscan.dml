#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------
#
# Implements the DBSCAN clustering algorithm using Euclidian distance matrix
#
# INPUT PARAMETERS:
# ----------------------------------------------------------------------------
# NAME  TYPE   DEFAULT  MEANING
# ----------------------------------------------------------------------------
# X     String   ---    Location to read matrix X with the input data records
# eps   Double   ---    Radius for core points
# minPts Int     ---    Minimum number of points within eps
#

m_dbscan = function (Matrix[double] X, double eps, int minPts)
    return (Matrix[double] clusterMembers)
{
    UNASSIGNED = 0;
    BORDER = 1;

    num_records = nrow(X);
    num_features = ncol(X);

    if (eps <= 0) {print("Incorrect eps.");}
    if (minPts <= 0) {print("Incorrect minPts.");}

    neighbours = edm(X);
    inEpsNeighbours = (neighbours <= eps) * (0 < neighbours);

    # matrix with only neighbour distances
    neighbours = neighbours * inEpsNeighbours;

    # assign core points
    corePts = rowSums(inEpsNeighbours) >= minPts - 1;

    # assign border pts
    for (i in 1:num_records) {
        for (j in i:num_features) {
            if (as.scalar(corePts[i,1]) == 0) {
                if (as.scalar(neighbours[i,j]) != 0) {
                    if (as.scalar(corePts[j, 1]) == 1) {
                        corePts[i, 1] = BORDER;
                    }
                }
            }
        }
    }
    neighbours = neighbours * corePts;

    cluster = 1;
    clusterNeighbours = 1;
    clusterMembers = matrix(UNASSIGNED, num_records, 1);

    for (i in 1:num_records) {
        s = rowSums(neighbours);
        rSum = as.scalar(s[i,1]);
        clusterN = 0;
        if (rSum != 0) {
            if (as.scalar(clusterMembers[i,1]) == UNASSIGNED) {
                clusterMembers[i,1] = cluster;
                clusterN = cluster;
                cluster = cluster + 1;
            }  else if (as.scalar(clusterMembers[i,1]) > 0) {
                clusterN = as.scalar(clusterMembers[i,1]);
            }

            for (j in i:num_records) {
                if (as.scalar(neighbours[i, j]) != 0) {
                    clusterMembers[j,1] = clusterN;
                }
            }
        }
    }
}